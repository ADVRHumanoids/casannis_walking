import casadi as cs
import numpy as np
import matplotlib.pyplot as plt


def plot_poly(point_list):
    '''
    Prints points that have been generated by sampling a cubic polynomial
    :param point_list: dictionary with list of points and list of timings
    :return: t-value plot of the points
    '''
    plt.figure()
    plt.plot(point_list['t'], point_list['p'])
    plt.grid()
    plt.title('Polynomial')
    plt.xlabel('Time [s]')
    plt.ylabel('Value []')
    plt.show()


def plot_spline(point_list):
    '''
    Prints points that have been generated by sampling a cubic spline
    :param point_list: dictionary with list of points and list of timings
    :return: t-value plot of the points
    '''
    plt.figure()
    plt.plot(point_list['t'], point_list['p'])
    plt.grid()
    plt.title('Polynomial')
    plt.xlabel('Time [s]')
    plt.ylabel('Value []')
    plt.show()


class CubicPolynomial:
    '''
    Construct a class of a cubic polynomial from zero and first derivative values
    at the beginning and at the end and the duration
    '''

    def __init__(self, p_list, v_list, T, t0=0):
        '''
        Construct the object of the class
        :param p_list: list of position values
        :param v_list: list of first derivative values
        :param T: duration of the polynomial
        :param t0: global starting time of the polynomial (default zero)
        '''

        # save in the class
        self._p0 = p_list[0]
        self._p1 = p_list[1]
        self._v0 = v_list[0]
        self._v1 = v_list[1]
        self._t0 = t0
        self._T = T

        # poly coefficients w/o time offset
        # p(t) = d * t^3 + c * t^2 + b * t + a
        a = self._p0
        b = self._v0
        c = - (3*self._p0 - 3*self._p1 + 2*T*self._v0 + T*self._v1)/T**2
        d = (2*self._p0 - 2*self._p1 + T*self._v0 + T*self._v1)/T**3

        # poly coefficients / general case
        # p(t) = d * (t-t0)^3 + c * (t-t0)^2 + b * (t-t0) + a
        self._a = a - b*t0 + c*t0**2 - d*t0**3
        self._b = b - 2*c*t0 + 3*t0**2*d
        self._c = c - 3*d*t0
        self._d = d

    def get_poly_from_coeffs(self):
        '''
        Get the polynomial from the coefficients
        :return: cubic polynomial object
        '''
        coeff_list = [self._a, self._b, self._c, self._d]

        # convert to polynomial function
        self._polynomial_object = np.polynomial.polynomial.Polynomial(coeff_list)  # spline 1

        return self._polynomial_object

    def get_point_list(self, polynomial, point_number):
        '''
        Generate a list of points (pairs of time and value) by sampling the cubic polynomial
        :param polynomial: the polynomial object
        :param point_number: number of points to be generated
        :return: dictionary with list of timings and list of values of the generated points
        '''

        end_time = self._t0 + self._T

        # sample time
        point_tlist = np.linspace(self._t0, end_time, point_number)

        # sample values
        point_list = polynomial(point_tlist)

        return {
            't': point_tlist,
            'p': point_list
        }


class CubicSpline:
    '''
    Construct a class for Cubic Spline, that is a sequence of cubic polynomials
    '''
    def __init__(self, p_list, v_list, T_list):
        '''
        Create the object from the list of zero and first derivative values polynomials' junctions
        :param p_list:  list of points at junctions
        :param v_list: list of first derivative values at junctions
        :param T_list: list of global times at junctions (not durations)
        '''

        self._poly_num = len(p_list) - 1    # number of polynomials
        self._p_list = p_list
        self._v_list = v_list
        self._T_list = T_list
        self._t_total = T_list[-1] - T_list[0]
        self._polynomials = []      # list to host polynomial objects

        self._durations = []    # list to host polynomials' durations
        self._frac_dur = []     # list to host fraction of polynomial durations wrt total spline duration
        for i in range(self._poly_num):
            self._durations.append(self._T_list[i+1] - self._T_list[i])
            self._frac_dur.append(self._durations[i] / self._t_total)

    def get_polys(self):
        '''
        Get the list of polynomial objects that comprise the spline
        :return: list of polynomial objects
        '''
        # loop over polynomials
        for i in range(self._poly_num):

            # construct using the CubicPolynomial class
            self._polynomials.append(CubicPolynomial(self._p_list[i:i + 2], self._v_list[i:i + 2],
                                                     self._durations[i], self._T_list[i]))

        return self._polynomials

    def get_point_list(self, resolution):
        '''
        Generate points by sampling the spline, in particular sampling each polynomial of the spline
        :param resolution: desired points per second to be generated
        :return: dictionary that includes list of points and list of timings
        '''

        point_list = []
        for i in range(self._poly_num):

            # number of points to be generated for each polynomial
            point_num = round(self._durations[i] * resolution)

            # Use the methods of CubicPolynomial class
            point_list.append(self._polynomials[i].get_point_list(self._polynomials[i].get_poly_from_coeffs(), point_num))

        point_tlist = [i['t'].tolist() for i in point_list]
        point_tlist_flat = [item for sublist in point_tlist for item in sublist]

        point_list = [i['p'].tolist() for i in point_list]
        point_list_flat = [item for sublist in point_list for item in sublist]

        return {
            't': point_tlist_flat,
            'p': point_list_flat
        }


if __name__ == "__main__":

    # symbolic
    '''sym_t = cs.SX
    p0 = sym_t.sym('p0', 1)
    v0 = sym_t.sym('v0', 1)
    p1 = sym_t.sym('p1', 1)
    v1 = sym_t.sym('v1', 1)

    poly_object = CubicPolynomial([p0, p1], [v0, v1], 1)
    polynomial = poly_object.get_poly_from_coeffs()
    points = poly_object.get_point_list(polynomial, 0.0, 100)
    '''

    # dense polynomial
    '''poly_object = CubicPolynomial([0.0, 2.0], [0.0, 0.0], 1)
    polynomials = poly_object.get_poly_from_coeffs()
    points = poly_object.get_point_list(10)
    plot_poly(points)'''

    # dense spline
    poly_object = CubicSpline([0.0, 2.0, 3.5, 8.0], [0.0, 0.0, 1.0, 0.0], [1.0, 2.0, 3.5, 4])
    polynomials = poly_object.get_polys()
    points = poly_object.get_point_list(300)
    plot_spline(points)