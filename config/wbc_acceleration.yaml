solver_options:
    regularization: 1e-6
    back_end: qpoases
    
stack:
    - [contact_1, contact_2, contact_3, contact_4, com]
    - [lhand, rhand]
    - [postural, force_1, force_2, force_3, force_4]

constraints:
    - underactuation
    # - fc_1
    # - fc_2
    # - fc_3
    # - fc_4
    - flim_1
    - flim_2
    - flim_3
    - flim_4
    - jlim
    - vlim

params:
  - &f_weight 1e-1
  - &f_min [-1000, -1000, -1000, 0, 0, 0]
  - &f_max [1000, 1000, 1000,  0, 0, 0]
  - &hand_dof [0, 1, 2]

force_1:
    lib_name: libcartesio_acceleration_support.so
    type: Force
    link: contact_1
    weight: *f_weight

force_2:
    lib_name: libcartesio_acceleration_support.so
    type: Force
    link: contact_2
    weight: *f_weight

force_3:
    lib_name: libcartesio_acceleration_support.so
    type: Force
    link: contact_3
    weight: *f_weight

force_4:
    lib_name: libcartesio_acceleration_support.so
    type: Force
    link: contact_4
    weight: *f_weight

fc_1:
    lib_name: libcartesio_acceleration_support.so
    type: FrictionCone
    link: contact_1
    local: false

fc_2:
    lib_name: libcartesio_acceleration_support.so
    type: FrictionCone
    link: contact_2
    local: false

fc_3:
    lib_name: libcartesio_acceleration_support.so
    type: FrictionCone
    link: contact_3
    local: false

fc_4:
    lib_name: libcartesio_acceleration_support.so
    type: FrictionCone
    link: contact_4
    local: false

flim_1:
    lib_name: libcartesio_acceleration_support.so
    type: ForceLimits
    link: contact_1
    min: *f_min
    max: *f_max

flim_2:
    lib_name: libcartesio_acceleration_support.so
    type: ForceLimits
    link: contact_2
    min: *f_min
    max: *f_max

flim_3:
    lib_name: libcartesio_acceleration_support.so
    type: ForceLimits
    link: contact_3
    min: *f_min
    max: *f_max

flim_4:
    lib_name: libcartesio_acceleration_support.so
    type: ForceLimits
    link: contact_4
    min: *f_min
    max: *f_max

underactuation:
    lib_name: libcartesio_acceleration_support.so
    type: DynamicFeasibility
    contacts: [contact_1, contact_2, contact_3, contact_4]
    dynamics: true

contact_1:
    lib_name: libcartesio_acceleration_support.so
    name: "FL_wheel"
    type: Cartesian
    lambda: 0.1
    distal_link: wheel_1	#contact_1
    indices: [0, 1, 2]

contact_2:
    lib_name: libcartesio_acceleration_support.so
    name: "FR_wheel"	
    type: Cartesian
    lambda: 0.1
    distal_link: wheel_2	#contact_2
    indices: [0, 1, 2]

contact_3:
    lib_name: libcartesio_acceleration_support.so
    name: "HL_wheel"	
    type: Cartesian
    lambda: 0.1
    distal_link: wheel_3	#contact_3
    indices: [0, 1, 2]

contact_4:
    lib_name: libcartesio_acceleration_support.so
    name: "HR_wheel"	
    type: Cartesian
    lambda: 0.1
    distal_link: wheel_4	#contact_4
    indices: [0, 1, 2]

lhand:
    lib_name: libcartesio_acceleration_support.so
    type: Cartesian
    lambda: 0.1
    base_link: pelvis
    distal_link: arm1_8
    indices: *hand_dof	#[0, 1, 2]

rhand:
    lib_name: libcartesio_acceleration_support.so
    type: Cartesian
    lambda: 0.1
    base_link: pelvis
    distal_link: arm2_8
    indices: *hand_dof	#[0, 1, 2]

com:
    lib_name: libcartesio_acceleration_support.so
    type: Com
    lambda: 0.1

postural:
    lib_name: libcartesio_acceleration_support.so
    type: Postural
    lambda: 0.1
    # weight: 1e-1

jlim: 
    lib_name: libcartesio_acceleration_support.so
    type: JointLimits
    limits_acc: 10.0

vlim: 
    lib_name: libcartesio_acceleration_support.so
    type: VelocityLimits
